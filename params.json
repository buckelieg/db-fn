{
  "name": "Simple-tools",
  "tagline": "Developer tools to simplify regular tasks",
  "body": "# simple-tools\r\nSimple dev tools for common day-to-day tasks.\r\nProject intended to simplify the things for java developer. \r\n\r\n## Getting Started with...\r\n### db-tools\r\nAdd maven dependency:\r\n```\r\n<dependency>\r\n  <groupId>com.github.buckelieg</groupId>\r\n  <artifactId>db-tools</artifactId>\r\n  <version>0.3</version>\r\n</dependency>\r\n```\r\nOperate on result set in a functional way.\r\n#### Select\r\nUse question marks:\r\n```java\r\nCollection<T> results = Queries.select(conn, \"SELECT * FROM TEST WHERE ID IN (?, ?)\", 1, 2)\r\n                .stream().collect(\r\n                        LinkedList<T>::new,\r\n                        (pList, rs) -> {\r\n                            try {\r\n                                pList.add(...);\r\n                            } catch (SQLException e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                        },\r\n                        Collection::addAll\r\n                );\r\n```\r\nor use named parameters:\r\n```java\r\nCollection<T> results = Queries.select(conn, \"SELECT * FROM TEST WHERE 1=1 AND ID IN (:ID) OR NAME=:name\", new HashMap<String, Object>() {{\r\n            put(\"id\", new Object[]{1, 2});\r\n            put(\"NaME\", \"name_5\");\r\n        }}).stream().collect(\r\n                LinkedList<T>::new,\r\n                (pList, rs) -> {\r\n                    try {\r\n                        pList.add(...);\r\n                    } catch (SQLException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                },\r\n                Collection::addAll\r\n        );\r\n```\r\n#### Update/Insert/Delete\r\n\r\n##### Insert \r\n\r\nwith question marks:\r\n```java\r\nint res = Queries.executeUpdate(conn, \"INSERT INTO TEST(name) VALUES(?)\", \"New_Name\");\r\n```\r\nOr with named parameters:\r\n```java\r\nint res = Queries.executeUpdate(conn, \"INSERT INTO TEST(name) VALUES(:name)\", new Pair<>(\"name\", \"New_Name\"));\r\n```\r\n##### Update\r\n```java\r\nint res = Queries.executeUpdate(conn, \"UPDATE TEST SET NAME=? WHERE NAME=?\", \"new_name_2\", \"name_2\");\r\n```\r\nor\r\n```java\r\nint res = Queries.executeUpdate(conn, \"UPDATE TEST SET NAME=:name WHERE NAME=:new_name\", new Pair<>(\"name\", \"new_name_2\"), new Pair<>(\"new_name\", \"name_2\"));\r\n```\r\n        \r\n##### Delete\r\n```java\r\nint res = Queries.executeUpdate(conn, \"DELETE FROM TEST WHERE name=?\", \"name_2\");\r\n```\r\nand so on. Explore test suite for more examples.\r\n\r\n#### ETL\r\nimplement simple ETL process:\r\n```java\r\nlong count = Queries.<Long>select(conn, \"SELECT COUNT(*) FROM TEST\").single((rs) -> rs.getLong(1));\r\n// calculate partitions here and split work to threads if needed\r\nExecutors.newCachedThreadPool().submit(() -> Queries.select(conn, \" SELECT * FROM TEST WHERE 1=1 AND ID>? AND ID<?\", start, end)\r\n.stream(rs -> /*map result set here*/).forEach(obj -> {\r\n            // do things here...\r\n        }));\r\n```\r\n\r\n#### Stored Procedures\r\nInvoking stored procedures is also quite simple:\r\n```java\r\nString name = Queries.call(db, \"{call GETNAMEBYID(?,?)}\", P.in(1983), P.out(JDBCType.VARCHAR)).getResult((cs) -> cs.getString(2));\r\n```\r\nNote that in the latter case stored procedure must not return any result sets.\r\nIf stored procedure is considered to return result sets it is handled similar to reqular selects (see above).\r\n\r\n### Prerequisites\r\nJava8, Git, Maven.\r\n\r\n## License\r\nThis project is licensed under Apache License, Version 2.0 - see the [LICENSE.md](LICENSE.md) file for details\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}